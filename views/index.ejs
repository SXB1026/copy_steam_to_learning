<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Items</title>
  <style>
    body {
      margin: 0;
      display: flex;
      flex-direction: column;
    }

    .navbar {
      width: 100%;
      height: 50px;
      background-color: deepskyblue;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: fixed;
      top: 0;
      left: 0;
      padding: 0 20px;
      box-sizing: border-box;
      z-index: 100;
    }

    .main {
      display: flex;
      flex: 1;
      margin-top: 50px; /* 为了防止内容被顶部导航栏遮挡，这里设置一个与导航栏相等的上边距 */
      background-color: rgb(55, 60, 204);
    }

    .classify {
      width: 20vw;
      height: calc(100vh - 50px); /* 减去顶部导航栏的高度 */
      position: fixed;
      top: 50px; /* 为了防止侧边栏覆盖顶部导航栏，设置一个与导航栏相等的上边距 */
      left: 0;
      background-color: #897bef;
      margin-right: 30px;
      overflow-y: auto;
    }
    .right_content{
      margin-left: 20vw
    }
    .discount_content {
      flex: 1;
      /* margin-left: 20vw; */
      margin-right: 30px;
      padding-left: 30px;
      position: relative;
      justify-content: center;
    }

    .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      gap: 10px;
    }


    .item {
      width: calc(100% / 3 - 20px);
      /* height: calc((100vw /4 ) * 1); */
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
      background-color: #41359c;
    }

    .item img {
      width: 100%;
      height: 70%;
      object-fit: cover;
      cursor: pointer;
    }

    .prev,
    .next {
      position: absolute;
      top: 50%;
      height: 130px;
      transform: translateY(-50%);
      font-size: 24px;
    }

    .prev {
      left: 0px;
    }

    .next {
      right: -30px;
    }

    .nameDiv{
      display: flex;
      flex-direction: row;
      height: 35px;
    }
  </style>
</head>
<body>

  <!-- 这个里面的路径不受app.use(express.static('public'));影响 -->
  <!-- 导航栏 -->
  <%- include('../public/partials/navbar') %>

  <!-- 导航栏下面所有的内容 -->
  <div class="main">
    <!-- 左侧导航 -->
    <aside class="classify">左侧类别边栏1</aside>
    <!-- 右侧的全部内容区 -->
    <div class="right_content">
      <!-- 内容区最上面的新品轮播图 -->
      <div class="new_content"></div>
      <!-- 打折区 -->
      <div class="discount_content">
        <button id="prev" class="prev">&lt;</button>
        <div id="content" class="container"></div>
        <button id="next" class="next">&gt;</button
      </div>
      <!-- 下面的分类罗列区 -->
      <div class="other_content">

      </div>
      
    </div>
    </div>
  
    <script>
      // 定义索引和数据库数据条数
      let currentIndex = 0;
      let recordCount = 0;
  
      // 通过从数据库查询到的数据来渲染页面
      function updateContent(items) {
        const contentDiv = document.querySelector("#content");
        contentDiv.innerHTML = ""; // 清空内容
  
        items.forEach((item) => {
          const itemDiv = document.createElement("div");
          itemDiv.classList.add("item");
  
          const img = document.createElement("img");
          img.src = item.photo;
          img.alt = item.name;
          img.addEventListener('click', () => {
          // 跳转到详情页，将 id 作为 URL 参数传递
            location.href = `/details/${item.id}`;
          });

          itemDiv.appendChild(img);
  
          //这个div装 图片下面的游戏名，价格等信息
          const nameDiv = document.createElement("div");
          nameDiv.classList.add("nameDiv");
  
          const nameH3 = document.createElement("h3");
          nameH3.textContent = item.name;
          nameDiv.appendChild(nameH3);
  
          const priceP = document.createElement("p");
          priceP.textContent = "价格: " + item.money;
          nameDiv.appendChild(priceP);
  
          itemDiv.appendChild(nameDiv);
  
          contentDiv.appendChild(itemDiv);
        });
      }
  
      // 初始化和点击按钮时会被调用
      function fetchData(index, limit) {
        if (index < 0 || index >= recordCount-1) {
          return;
        }
  
        fetch(`/data/${index}/${limit}`)
          .then((response) => response.json())
          .then((data) => {
            currentIndex = index;
            updateContent(data);
          })
          .catch((error) => console.error("Error fetching data:", error));
      } 
  
      // 这两个是监听按钮，通过改变查数据库的索引来实现切换推荐数据
      document.querySelector("#prev").addEventListener("click", () => {
        if (currentIndex > 0) {
          fetchData(currentIndex - 6, 6);
        }
      });
  
      document.querySelector("#next").addEventListener("click", () => {
        fetchData(currentIndex + 6, 6);
      });
  
      // 前进和后退按钮
      document.querySelector("#goBack").addEventListener("click", () => {
        window.history.back();
      });
  
      document.querySelector("#goForward").addEventListener("click", () => {
        window.history.forward();
      });
  
      // 直接先执行，获取记录数量和初始化网页
      fetch('/count')
        .then((response) => response.json())
        .then((data) => {
          recordCount = data.count;
          // 初始化
          fetchData(0, 6);
        })
        .catch((error) => console.error("Error fetching count:", error));
    </script>
  </body>
  </html>
  