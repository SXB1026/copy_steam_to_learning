<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- <script src="https://cdn.jsdelivr.net/npm/ejs@3.1.6/ejs.min.js"></script> -->
  <title>Items</title>
  <style>
    .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      gap: 10px;
    }
  
    .item {
      width: calc(100% / 3 - 20px);
      height: calc((100vw /4 ) * 1);
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
    }
  
    .item img {
      width: 100%;
      height: 50%;
      object-fit: cover;
    }
  
    .item-info {
      height: 50%;
      display: flex;
      flex-direction: column;
      justify-content: space-evenly;
      align-items: center;
      text-align: center;
      font-size: 14px;
    }
  
    .wrapper {
      position: relative;
      margin-left: 20vw;
      margin-right: 30px;
    }
  
    .prev,
    .next {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      font-size: 24px;
    }
  
    .prev {
      left: -30px;
    }
  
    .next {
      right: -30px;
    }
    .all_thing_in_main{
      display: flex;
      flex-direction: row;
    }
    .classify {
      width: 20vw;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #f5f5f5; /* 可以设置一个背景色，更容易看到效果 */
      overflow-y: auto; /* 如果内容超出高度，允许滚动 */
    }

  </style>
  
  
</head>
<body>
  <div class="all_thing_in_main">
  <aside class="classify">左侧类别边栏</aside>
  <div class="wrapper">
    <button id="prev" class="prev">&lt;</button>
    <div id="content" class="container"></div>
    <button id="next" class="next">&gt;</button>
  </div>
</div>
      
      <script>
        //定义索引和数据库数据条数
        let currentIndex = 0;
        let recordCount = 0;

        //通过从数据库查询到的数据来渲染页面
        function updateContent(items) {
          const contentDiv = document.querySelector("#content");
          contentDiv.innerHTML = ""; // 清空内容

          items.forEach((item) => {
            const itemDiv = document.createElement("div");
            itemDiv.classList.add("item");

            // const randomP = document.createElement("p");
            // randomP.textContent = "随机数: " + Math.random();
            // itemDiv.appendChild(randomP);

            const img = document.createElement("img");
            img.src = item.photo;
            img.alt = item.name;
            itemDiv.appendChild(img);

            const nameH3 = document.createElement("h3");
            nameH3.textContent = item.name;
            itemDiv.appendChild(nameH3);

            const priceP = document.createElement("p");
            priceP.textContent = "价格: " + item.money;
            itemDiv.appendChild(priceP);

            // const typeP = document.createElement("p");
            // typeP.textContent = "类别: " + item.type;
            // itemDiv.appendChild(typeP);

            // const starP = document.createElement("p");
            // starP.textContent = "评分: " + item.star;
            // itemDiv.appendChild(starP);

            contentDiv.appendChild(itemDiv);
          });
}

          //初始化和点击按钮时会被调用
          function fetchData(index, limit) {
            if (index < 0 || index >= recordCount-1) {
              return;
            }

            fetch(`/data/${index}/${limit}`)
              .then((response) => response.json())
              .then((data) => {
                currentIndex = index;
                console.log("更新数据" + JSON.stringify(data));
                updateContent(data);
              })
              .catch((error) => console.error("Error fetching data:", error));
          } 

        //这两个是监听按钮，通过改变查数据库的索引来实现切换推荐数据
        document.querySelector("#prev").addEventListener("click", () => {
        if (currentIndex > 0) {
            fetchData(currentIndex - 6,6);
        }
        });

        document.querySelector("#next").addEventListener("click", () => {
        fetchData(currentIndex + 6,6);
        });

        // 直接先执行，获取记录数量和初始化网页
        fetch('/count')
        .then((response) => response.json())
        .then((data) => {
          recordCount = data.count;
          // 初始化
          fetchData(0,6);
        })
        .catch((error) => console.error("Error fetching count:", error));

      </script>
</body>
